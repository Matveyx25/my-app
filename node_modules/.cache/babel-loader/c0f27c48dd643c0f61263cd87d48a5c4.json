{"ast":null,"code":"import { usersAPI, profileAPI } from \"../api/api\";\nconst ADD_POST = 'lightgram/profile/ADD-POST';\nconst SET_USER_PROFILE = 'lightgram/profile/SET-USER-PROFILE';\nconst SET_STATUS = 'lightgram/profile/SET-STATUS';\nconst SAVE_PHOTO_SUCCESS = 'lightgram/profile/SAVE_PHOTO_SUCCESS';\nlet initialState = {\n  postsData: [{\n    id: 1,\n    message: 'Hi',\n    likequantity: 23\n  }, {\n    id: 2,\n    message: 'Hello',\n    likequantity: 23\n  }, {\n    id: 3,\n    message: 'you',\n    likequantity: 23\n  }, {\n    id: 3,\n    message: 'Yo',\n    likequantity: 23\n  }, {\n    id: 5,\n    message: 'Good bay',\n    likequantity: 23\n  }, {\n    id: 6,\n    message: 'Lose',\n    likequantity: 23\n  }],\n  profile: null,\n  status: \"\"\n};\n\nconst profileReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST:\n      {\n        let newPost = {\n          id: 8,\n          message: action.newPostText,\n          likequantity: 0\n        };\n        let stateCopy = { ...state\n        };\n        stateCopy.postsData = [...state.postsData];\n        stateCopy.postsData.unshift(newPost);\n        return stateCopy;\n      }\n\n    case SET_USER_PROFILE:\n      {\n        return { ...state,\n          profile: action.profile\n        };\n      }\n\n    case SAVE_PHOTO_SUCCESS:\n      {\n        return { ...state,\n          profile: { ...state.profile,\n            photo: action.photo\n          }\n        };\n      }\n\n    case SET_STATUS:\n      {\n        return { ...state,\n          status: action.status\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const addPostActionCreater = newPostText => ({\n  type: ADD_POST,\n  newPostText\n});\nexport const setUserProfile = profile => ({\n  type: SET_USER_PROFILE,\n  profile\n});\nexport const setStatus = status => ({\n  type: SET_STATUS,\n  status\n});\nexport const savePhotoSuccess = photos => ({\n  type: SAVE_PHOTO_SUCCESS,\n  photos\n});\nexport const getUserProfile = userId => async dispatch => {\n  let response = await usersAPI.getProfile(userId);\n  dispatch(setUserProfile(response.data));\n};\nexport const getStatus = userId => async dispatch => {\n  let response = await profileAPI.getStatus(userId);\n  dispatch(setStatus(response.data));\n};\nexport const updateStatus = status => async dispatch => {\n  let response = await profileAPI.updateStatus(status);\n\n  if (response.data.resultCode === 0) {\n    dispatch(setStatus(status));\n  }\n};\nexport const savePhoto = file => async dispatch => {\n  let response = await profileAPI.savePhoto(file);\n\n  if (response.data.resultCode === 0) {\n    dispatch(savePhotoSuccess(response.data.data.photos));\n  }\n};\nexport default profileReducer;","map":{"version":3,"sources":["/Users/matveystepanov/Documents/SamuraysWay/first-project/my-app/src/redux/profile-reducer.js"],"names":["usersAPI","profileAPI","ADD_POST","SET_USER_PROFILE","SET_STATUS","SAVE_PHOTO_SUCCESS","initialState","postsData","id","message","likequantity","profile","status","profileReducer","state","action","type","newPost","newPostText","stateCopy","unshift","photo","addPostActionCreater","setUserProfile","setStatus","savePhotoSuccess","photos","getUserProfile","userId","dispatch","response","getProfile","data","getStatus","updateStatus","resultCode","savePhoto","file"],"mappings":"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","sourcesContent":["import { usersAPI, profileAPI } from \"../api/api\"\n\nconst ADD_POST = 'lightgram/profile/ADD-POST'\nconst SET_USER_PROFILE = 'lightgram/profile/SET-USER-PROFILE'\nconst SET_STATUS = 'lightgram/profile/SET-STATUS'\nconst SAVE_PHOTO_SUCCESS = 'lightgram/profile/SAVE_PHOTO_SUCCESS'\n\nlet initialState = {\n    postsData: [\n        { id: 1, message: 'Hi', likequantity: 23 },\n        { id: 2, message: 'Hello', likequantity: 23 },\n        { id: 3, message: 'you', likequantity: 23 },\n        { id: 3, message: 'Yo', likequantity: 23 },\n        { id: 5, message: 'Good bay', likequantity: 23 },\n        { id: 6, message: 'Lose', likequantity: 23 }\n    ],\n    profile: null,\n    status: \"\",\n}\n\nconst profileReducer = (state = initialState, action) => {\n\n    switch (action.type) {\n        case ADD_POST:{\n            let newPost = {\n                id: 8,\n                message: action.newPostText,\n                likequantity: 0\n            }\n            let stateCopy = {...state}\n            stateCopy.postsData = [...state.postsData]\n            stateCopy.postsData.unshift(newPost)\n            return stateCopy\n        }\n        case SET_USER_PROFILE: {\n            return {...state, profile: action.profile}\n        }\n        case SAVE_PHOTO_SUCCESS: {\n            return {...state, profile: {...state.profile , photo: action.photo}}\n        }\n        case SET_STATUS: {\n            return {...state, status: action.status}\n        }\n        default:\n            return state\n    }\n}\n\nexport const addPostActionCreater = (newPostText) => ({type: ADD_POST , newPostText})\nexport const setUserProfile = (profile) => ({type: SET_USER_PROFILE, profile})\nexport const setStatus = (status) => ({type: SET_STATUS, status})\nexport const savePhotoSuccess = (photos) => ({type: SAVE_PHOTO_SUCCESS, photos})\n\nexport const getUserProfile = (userId) => async (dispatch) => {\n    let response = await usersAPI.getProfile(userId)\n        dispatch(setUserProfile(response.data))\n}\nexport const getStatus = (userId) => async (dispatch) => {\n    let response = await profileAPI.getStatus(userId)\n                dispatch(setStatus(response.data))\n}\nexport const updateStatus = (status) => async (dispatch) => {\n    let response = await profileAPI.updateStatus(status)\n        if(response.data.resultCode === 0) {\n            dispatch(setStatus(status))\n        }\n}\nexport const savePhoto = (file) => async (dispatch) => {\n    let response = await profileAPI.savePhoto(file)\n        if(response.data.resultCode === 0) {\n            dispatch(savePhotoSuccess(response.data.data.photos))\n        }\n}\n\nexport default profileReducer"]},"metadata":{},"sourceType":"module"}