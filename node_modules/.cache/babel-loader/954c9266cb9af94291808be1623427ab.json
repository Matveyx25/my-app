{"ast":null,"code":"import { authAPI, securityAPI } from \"../api/api\";\nimport { stopSubmit } from \"redux-form\";\nconst SET_USER_DATA = 'lightgram/auth/SET_USER_DATA';\nlet initialState = {\n  usersId: null,\n  email: null,\n  login: null,\n  isAuth: false,\n  captchaUr\n};\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USER_DATA:\n      return { ...state,\n        ...action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const setAuthUserData = (id, email, login, isAuth) => ({\n  type: SET_USER_DATA,\n  payload: {\n    id,\n    email,\n    login,\n    isAuth\n  }\n});\nexport const getAuthUserData = () => async dispatch => {\n  let response = await authAPI.me();\n\n  if (response.data.resultCode === 0) {\n    let {\n      id,\n      email,\n      login\n    } = response.data.data;\n    dispatch(setAuthUserData(id, email, login, true));\n  }\n};\nexport const login = (email, password, rememberMe) => async dispatch => {\n  let response = await authAPI.login(email, password, rememberMe);\n\n  if (response.data.resultCode === 0) {\n    dispatch(getAuthUserData());\n  } else {\n    let message = response.data.messages.length > 0 ? response.data.messages[0] : 'Some error';\n    dispatch(stopSubmit(\"login\", {\n      _error: message\n    }));\n  }\n};\nexport const getCaptchaUrl = () => async dispatch => {\n  const response = await securityAPI.getCaptcha();\n  const captchaUrl = response.data.url;\n};\nexport const logout = () => async dispatch => {\n  let response = await authAPI.logout();\n\n  if (response.data.resultCode === 0) {\n    dispatch(setAuthUserData(null, null, null, false));\n  }\n};\nexport default authReducer;","map":{"version":3,"sources":["/Users/matveystepanov/Documents/SamuraysWay/first-project/my-app/src/redux/auth-reducer.js"],"names":["authAPI","securityAPI","stopSubmit","SET_USER_DATA","initialState","usersId","email","login","isAuth","captchaUr","authReducer","state","action","type","payload","setAuthUserData","id","getAuthUserData","dispatch","response","me","data","resultCode","password","rememberMe","message","messages","length","_error","getCaptchaUrl","getCaptcha","captchaUrl","url","logout"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,WAAlB,QAAqC,YAArC;AACA,SAASC,UAAT,QAA2B,YAA3B;AAEA,MAAMC,aAAa,GAAG,8BAAtB;AAEA,IAAIC,YAAY,GAAG;AACfC,EAAAA,OAAO,EAAE,IADM;AAEfC,EAAAA,KAAK,EAAE,IAFQ;AAGfC,EAAAA,KAAK,EAAE,IAHQ;AAIfC,EAAAA,MAAM,EAAE,KAJO;AAKfC,EAAAA;AALe,CAAnB;;AAQA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGP,YAAT,EAAuBQ,MAAvB,KAAkC;AAClD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKV,aAAL;AACI,aAAO,EACH,GAAGQ,KADA;AAEH,WAAGC,MAAM,CAACE;AAFP,OAAP;;AAIJ;AACI,aAAOH,KAAP;AAPR;AASH,CAVD;;AAaA,OAAO,MAAMI,eAAe,GAAG,CAACC,EAAD,EAAKV,KAAL,EAAYC,KAAZ,EAAmBC,MAAnB,MAC1B;AAAEK,EAAAA,IAAI,EAAEV,aAAR;AAAuBW,EAAAA,OAAO,EAAE;AAAEE,IAAAA,EAAF;AAAMV,IAAAA,KAAN;AAAaC,IAAAA,KAAb;AAAoBC,IAAAA;AAApB;AAAhC,CAD0B,CAAxB;AAGP,OAAO,MAAMS,eAAe,GAAG,MAAM,MAAOC,QAAP,IAAoB;AACrD,MAAIC,QAAQ,GAAG,MAAMnB,OAAO,CAACoB,EAAR,EAArB;;AACA,MAAID,QAAQ,CAACE,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAChC,QAAI;AAAEN,MAAAA,EAAF;AAAMV,MAAAA,KAAN;AAAaC,MAAAA;AAAb,QAAuBY,QAAQ,CAACE,IAAT,CAAcA,IAAzC;AACAH,IAAAA,QAAQ,CAACH,eAAe,CAACC,EAAD,EAAKV,KAAL,EAAYC,KAAZ,EAAmB,IAAnB,CAAhB,CAAR;AACH;AACJ,CANM;AAQP,OAAO,MAAMA,KAAK,GAAG,CAACD,KAAD,EAAQiB,QAAR,EAAkBC,UAAlB,KAAiC,MAAON,QAAP,IAAoB;AACtE,MAAIC,QAAQ,GAAG,MAAMnB,OAAO,CAACO,KAAR,CAAcD,KAAd,EAAqBiB,QAArB,EAA+BC,UAA/B,CAArB;;AACA,MAAIL,QAAQ,CAACE,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAChCJ,IAAAA,QAAQ,CAACD,eAAe,EAAhB,CAAR;AACH,GAFD,MAEO;AACH,QAAIQ,OAAO,GAAGN,QAAQ,CAACE,IAAT,CAAcK,QAAd,CAAuBC,MAAvB,GAAgC,CAAhC,GAAoCR,QAAQ,CAACE,IAAT,CAAcK,QAAd,CAAuB,CAAvB,CAApC,GAAgE,YAA9E;AACAR,IAAAA,QAAQ,CAAChB,UAAU,CAAC,OAAD,EAAU;AAAE0B,MAAAA,MAAM,EAAEH;AAAV,KAAV,CAAX,CAAR;AACH;AACJ,CARM;AAUP,OAAO,MAAMI,aAAa,GAAG,MAAM,MAAOX,QAAP,IAAoB;AACnD,QAAMC,QAAQ,GAAG,MAAMlB,WAAW,CAAC6B,UAAZ,EAAvB;AACA,QAAMC,UAAU,GAAGZ,QAAQ,CAACE,IAAT,CAAcW,GAAjC;AAEH,CAJM;AAQP,OAAO,MAAMC,MAAM,GAAG,MAAM,MAAOf,QAAP,IAAoB;AAC5C,MAAIC,QAAQ,GAAG,MAAMnB,OAAO,CAACiC,MAAR,EAArB;;AACA,MAAId,QAAQ,CAACE,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAChCJ,IAAAA,QAAQ,CAACH,eAAe,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,KAAnB,CAAhB,CAAR;AACH;AACJ,CALM;AAOP,eAAeL,WAAf","sourcesContent":["import { authAPI, securityAPI } from \"../api/api\"\nimport { stopSubmit } from \"redux-form\"\n\nconst SET_USER_DATA = 'lightgram/auth/SET_USER_DATA'\n\nlet initialState = {\n    usersId: null,\n    email: null,\n    login: null,\n    isAuth: false,\n    captchaUr\n}\n\nconst authReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_USER_DATA:\n            return {\n                ...state,\n                ...action.payload\n            }\n        default:\n            return state;\n    }\n}\n\n\nexport const setAuthUserData = (id, email, login, isAuth) =>\n    ({ type: SET_USER_DATA, payload: { id, email, login, isAuth } })\n\nexport const getAuthUserData = () => async (dispatch) => {\n    let response = await authAPI.me()\n    if (response.data.resultCode === 0) {\n        let { id, email, login } = response.data.data\n        dispatch(setAuthUserData(id, email, login, true))\n    }\n}\n\nexport const login = (email, password, rememberMe) => async (dispatch) => {\n    let response = await authAPI.login(email, password, rememberMe)\n    if (response.data.resultCode === 0) {\n        dispatch(getAuthUserData())\n    } else {\n        let message = response.data.messages.length > 0 ? response.data.messages[0] : 'Some error'\n        dispatch(stopSubmit(\"login\", { _error: message }))\n    }\n}\n\nexport const getCaptchaUrl = () => async (dispatch) => {\n    const response = await securityAPI.getCaptcha()\n    const captchaUrl = response.data.url\n\n}\n\n\n\nexport const logout = () => async (dispatch) => {\n    let response = await authAPI.logout()\n    if (response.data.resultCode === 0) {\n        dispatch(setAuthUserData(null, null, null, false))\n    }\n}\n\nexport default authReducer"]},"metadata":{},"sourceType":"module"}