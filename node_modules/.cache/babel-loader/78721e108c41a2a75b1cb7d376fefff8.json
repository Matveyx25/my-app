{"ast":null,"code":"import { usersAPI } from \"../api/api\";\nconst FOLLOW = 'FOLLOW';\nconst UNFOLLOW = 'UNFOLLOW';\nconst SET_USERS = 'SET_USERS';\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS';\nlet initialState = {\n  users: [],\n  pageSize: 5,\n  totalUsersCount: 0,\n  currentPage: 1,\n  isFetching: false,\n  followingInProgress: []\n};\n\nconst usersReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FOLLOW:\n      return { ...state,\n        users: state.users.map(u => {\n          if (u.id === action.userId) {\n            return { ...u,\n              followed: true\n            };\n          }\n\n          return u;\n        })\n      };\n\n    case UNFOLLOW:\n      return { ...state,\n        users: state.users.map(u => {\n          if (u.id === action.userId) {\n            return { ...u,\n              followed: false\n            };\n          }\n\n          return u;\n        })\n      };\n\n    case SET_USERS:\n      return { ...state,\n        users: action.users\n      };\n\n    case SET_CURRENT_PAGE:\n      return { ...state,\n        currentPage: action.currentPage\n      };\n\n    case SET_TOTAL_USERS_COUNT:\n      return { ...state,\n        totalUsersCount: action.count\n      };\n\n    case TOGGLE_IS_FETCHING:\n      return { ...state,\n        isFetching: action.isFetching\n      };\n\n    case TOGGLE_IS_FOLLOWING_PROGRESS:\n      return { ...state,\n        followingInProgress: action.isFetching ? [...state.followingInProgress, action.userId] : state.followingInProgress.filter(id => id != action.userId)\n      };\n\n    default:\n      return state;\n  }\n}; // ACTION CREATOR\n\n\nexport const followSuccess = userId => ({\n  type: FOLLOW,\n  userId\n});\nexport const unfollowSuccess = userId => ({\n  type: UNFOLLOW,\n  userId\n});\nexport const setUsers = users => ({\n  type: SET_USERS,\n  users\n});\nexport const setCurrentPage = currentPage => ({\n  type: SET_CURRENT_PAGE,\n  currentPage\n});\nexport const setUsersTotalCount = totalUsersCount => ({\n  type: SET_TOTAL_USERS_COUNT,\n  count: totalUsersCount\n});\nexport const toggleIsFetching = isFetching => ({\n  type: TOGGLE_IS_FETCHING,\n  isFetching\n});\nexport const toggleFollowingProgress = (isFetching, userId) => ({\n  type: TOGGLE_IS_FOLLOWING_PROGRESS,\n  isFetching,\n  userId\n}); // THUNK\n\nexport const getUsers = (currentPage, pageSize) => {\n  return dispatch => {\n    dispatch(toggleIsFetching(true));\n    usersAPI.getUsers(currentPage, pageSize).then(response => {\n      dispatch(toggleIsFetching(false));\n      dispatch(setUsers(response.items));\n      dispatch(setUsersTotalCount(response.totalCount));\n    });\n  };\n};\nexport const follow = userId => {\n  return dispatch => {\n    dispatch(toggleFollowingProgress(true, userId));\n    usersAPI.getFollow(userId).then(response => {\n      if (response.resultCode == 0) {\n        dispatch(unfollowSuccess(userId));\n      }\n\n      dispatch(toggleFollowingProgress(false, userId));\n    });\n  };\n};\nexport default usersReducer;","map":{"version":3,"sources":["/Users/matveystepanov/Documents/SamuraysWay/first-project/my-app/src/redux/users-reduser.js"],"names":["usersAPI","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","initialState","users","pageSize","totalUsersCount","currentPage","isFetching","followingInProgress","usersReducer","state","action","type","map","u","id","userId","followed","count","filter","followSuccess","unfollowSuccess","setUsers","setCurrentPage","setUsersTotalCount","toggleIsFetching","toggleFollowingProgress","getUsers","dispatch","then","response","items","totalCount","follow","getFollow","resultCode"],"mappings":"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","sourcesContent":["import { usersAPI } from \"../api/api\"\n\nconst FOLLOW = 'FOLLOW'\nconst UNFOLLOW = 'UNFOLLOW'\nconst SET_USERS = 'SET_USERS'\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE'\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT'\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING'\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS'\n\nlet initialState = {\n    users: [],\n    pageSize: 5, \n    totalUsersCount: 0,\n    currentPage: 1, \n    isFetching: false,\n    followingInProgress: []\n}\n\nconst usersReducer = (state = initialState, action) => {\n\n    switch (action.type) {\n        case FOLLOW:\n            return {\n                ...state,\n                users: state.users.map(u => {\n                    if (u.id === action.userId) {\n                        return { ...u, followed: true }\n                    }\n                    return u\n                })\n            }\n        case UNFOLLOW:\n            return {\n                ...state,\n                users: state.users.map(u => {\n                    if (u.id === action.userId) {\n                        return { ...u, followed: false }\n                    }\n                    return u\n                })\n            }\n        case SET_USERS:\n            return { ...state, users: action.users}\n        case SET_CURRENT_PAGE:\n            return { ...state, currentPage: action.currentPage}\n        case SET_TOTAL_USERS_COUNT:\n            return { ...state, totalUsersCount: action.count}\n        case TOGGLE_IS_FETCHING:\n            return { ...state, isFetching: action.isFetching}\n        case TOGGLE_IS_FOLLOWING_PROGRESS:\n            return { ...state,\n                 followingInProgress: action.isFetching \n                 ? [...state.followingInProgress , action.userId] \n                 : state.followingInProgress.filter(id => id != action.userId)}         \n        default:\n            return state;\n    }\n}\n\n// ACTION CREATOR\n\nexport const followSuccess = (userId) => ({ type: FOLLOW, userId })\nexport const unfollowSuccess = (userId) => ({ type: UNFOLLOW, userId })\nexport const setUsers = (users) => ({ type: SET_USERS, users })\nexport const setCurrentPage = (currentPage) => ({type:SET_CURRENT_PAGE, currentPage})\nexport const setUsersTotalCount = (totalUsersCount) => ({type: SET_TOTAL_USERS_COUNT, count: totalUsersCount })\nexport const toggleIsFetching = (isFetching) => ({type: TOGGLE_IS_FETCHING, isFetching})\nexport const toggleFollowingProgress = (isFetching, userId ) => ({type: TOGGLE_IS_FOLLOWING_PROGRESS, isFetching , userId})\n\n// THUNK\n\nexport const getUsers = (currentPage, pageSize) => {\n    return (dispatch) => {\n    dispatch(toggleIsFetching(true))\n        usersAPI.getUsers(currentPage , pageSize).then(response => {\n                dispatch(toggleIsFetching(false))\n                dispatch(setUsers(response.items))\n                dispatch(setUsersTotalCount(response.totalCount))\n        })\n}\n}\n\nexport const follow = (userId) => {\n    return (dispatch) => {\n        dispatch(toggleFollowingProgress(true, userId))\n        usersAPI.getFollow(userId).then(response => {\n            if (response.resultCode == 0) { \n                dispatch(unfollowSuccess(userId) )}\n           dispatch(toggleFollowingProgress(false, userId))\n        })\n    }\n}\n\nexport default usersReducer;"]},"metadata":{},"sourceType":"module"}