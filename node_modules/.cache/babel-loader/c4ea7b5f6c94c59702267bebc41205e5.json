{"ast":null,"code":"let store = {\n  _state: {\n    profilePage: {\n      postsData: [{\n        id: 1,\n        message: 'Hi',\n        likequantity: 23\n      }, {\n        id: 2,\n        message: 'Hello',\n        likequantity: 23\n      }, {\n        id: 3,\n        message: 'you',\n        likequantity: 23\n      }, {\n        id: 3,\n        message: 'Yo',\n        likequantity: 23\n      }, {\n        id: 5,\n        message: 'Good bay',\n        likequantity: 23\n      }, {\n        id: 6,\n        message: 'Lose',\n        likequantity: 23\n      }],\n      newPostState: 'text'\n    },\n    dialogsPage: {\n      dialogs: [{\n        id: 1,\n        name: 'Alex'\n      }, {\n        id: 2,\n        name: 'Matvey'\n      }, {\n        id: 3,\n        name: 'Victor'\n      }, {\n        id: 4,\n        name: 'Sasha'\n      }, {\n        id: 5,\n        name: 'Artem'\n      }, {\n        id: 6,\n        name: 'Pasha'\n      }],\n      messages: [{\n        id: 1,\n        message: 'Hi',\n        author: 'me'\n      }, {\n        id: 2,\n        message: 'Hello',\n        author: 'other'\n      }, {\n        id: 3,\n        message: 'How are you',\n        author: 'me'\n      }, {\n        id: 3,\n        message: 'Good',\n        author: 'other'\n      }, {\n        id: 5,\n        message: 'And you',\n        author: 'other'\n      }, {\n        id: 6,\n        message: 'Good',\n        author: 'me'\n      }]\n    }\n  },\n\n  renderEntireTree() {}\n\n};\nexport let updateNewPostText = newText => {\n  state.profilePage.newPostState = newText;\n  renderEntireTree(state);\n};\nexport const subscribe = observer => {\n  renderEntireTree = observer;\n};\nexport default state;","map":{"version":3,"sources":["/Users/matveystepanov/Documents/SamuraysWay/first-project/my-app/src/redux/state.js"],"names":["store","_state","profilePage","postsData","id","message","likequantity","newPostState","dialogsPage","dialogs","name","messages","author","renderEntireTree","updateNewPostText","newText","state","subscribe","observer"],"mappings":"AACA,IAAIA,KAAK,GAAG;AACRC,EAAAA,MAAM,EAAE;AACRC,IAAAA,WAAW,EAAE;AACTC,MAAAA,SAAS,EAAE,CACP;AAAEC,QAAAA,EAAE,EAAE,CAAN;AAASC,QAAAA,OAAO,EAAE,IAAlB;AAAwBC,QAAAA,YAAY,EAAE;AAAtC,OADO,EAEP;AAAEF,QAAAA,EAAE,EAAE,CAAN;AAASC,QAAAA,OAAO,EAAE,OAAlB;AAA2BC,QAAAA,YAAY,EAAE;AAAzC,OAFO,EAGP;AAAEF,QAAAA,EAAE,EAAE,CAAN;AAASC,QAAAA,OAAO,EAAE,KAAlB;AAAyBC,QAAAA,YAAY,EAAE;AAAvC,OAHO,EAIP;AAAEF,QAAAA,EAAE,EAAE,CAAN;AAASC,QAAAA,OAAO,EAAE,IAAlB;AAAwBC,QAAAA,YAAY,EAAE;AAAtC,OAJO,EAKP;AAAEF,QAAAA,EAAE,EAAE,CAAN;AAASC,QAAAA,OAAO,EAAE,UAAlB;AAA8BC,QAAAA,YAAY,EAAE;AAA5C,OALO,EAMP;AAAEF,QAAAA,EAAE,EAAE,CAAN;AAASC,QAAAA,OAAO,EAAE,MAAlB;AAA0BC,QAAAA,YAAY,EAAE;AAAxC,OANO,CADF;AASTC,MAAAA,YAAY,EAAE;AATL,KADL;AAYRC,IAAAA,WAAW,EAAE;AACTC,MAAAA,OAAO,EAAE,CACL;AAAEL,QAAAA,EAAE,EAAE,CAAN;AAASM,QAAAA,IAAI,EAAE;AAAf,OADK,EAEL;AAAEN,QAAAA,EAAE,EAAE,CAAN;AAASM,QAAAA,IAAI,EAAE;AAAf,OAFK,EAGL;AAAEN,QAAAA,EAAE,EAAE,CAAN;AAASM,QAAAA,IAAI,EAAE;AAAf,OAHK,EAIL;AAAEN,QAAAA,EAAE,EAAE,CAAN;AAASM,QAAAA,IAAI,EAAE;AAAf,OAJK,EAKL;AAAEN,QAAAA,EAAE,EAAE,CAAN;AAASM,QAAAA,IAAI,EAAE;AAAf,OALK,EAML;AAAEN,QAAAA,EAAE,EAAE,CAAN;AAASM,QAAAA,IAAI,EAAE;AAAf,OANK,CADA;AASTC,MAAAA,QAAQ,EAAE,CACN;AAAEP,QAAAA,EAAE,EAAE,CAAN;AAASC,QAAAA,OAAO,EAAE,IAAlB;AAAwBO,QAAAA,MAAM,EAAE;AAAhC,OADM,EAEN;AAAER,QAAAA,EAAE,EAAE,CAAN;AAASC,QAAAA,OAAO,EAAE,OAAlB;AAA2BO,QAAAA,MAAM,EAAE;AAAnC,OAFM,EAGN;AAAER,QAAAA,EAAE,EAAE,CAAN;AAASC,QAAAA,OAAO,EAAE,aAAlB;AAAiCO,QAAAA,MAAM,EAAE;AAAzC,OAHM,EAIN;AAAER,QAAAA,EAAE,EAAE,CAAN;AAASC,QAAAA,OAAO,EAAE,MAAlB;AAA0BO,QAAAA,MAAM,EAAE;AAAlC,OAJM,EAKN;AAAER,QAAAA,EAAE,EAAE,CAAN;AAASC,QAAAA,OAAO,EAAE,SAAlB;AAA6BO,QAAAA,MAAM,EAAE;AAArC,OALM,EAMN;AAAER,QAAAA,EAAE,EAAE,CAAN;AAASC,QAAAA,OAAO,EAAE,MAAlB;AAA0BO,QAAAA,MAAM,EAAE;AAAlC,OANM;AATD;AAZL,GADA;;AAgCZC,EAAAA,gBAAgB,GAAG,CAAG;;AAhCV,CAAZ;AAwCA,OAAO,IAAIC,iBAAiB,GAAIC,OAAD,IAAa;AACxCC,EAAAA,KAAK,CAACd,WAAN,CAAkBK,YAAlB,GAAiCQ,OAAjC;AACAF,EAAAA,gBAAgB,CAACG,KAAD,CAAhB;AACH,CAHM;AAKP,OAAO,MAAMC,SAAS,GAAIC,QAAD,IAAc;AACnCL,EAAAA,gBAAgB,GAAGK,QAAnB;AACH,CAFM;AAIP,eAAeF,KAAf","sourcesContent":["\nlet store = {\n    _state: {\n    profilePage: {\n        postsData: [\n            { id: 1, message: 'Hi', likequantity: 23 },\n            { id: 2, message: 'Hello', likequantity: 23 },\n            { id: 3, message: 'you', likequantity: 23 },\n            { id: 3, message: 'Yo', likequantity: 23 },\n            { id: 5, message: 'Good bay', likequantity: 23 },\n            { id: 6, message: 'Lose', likequantity: 23 }\n        ],\n        newPostState: 'text'\n    },\n    dialogsPage: {\n        dialogs: [\n            { id: 1, name: 'Alex' },\n            { id: 2, name: 'Matvey' },\n            { id: 3, name: 'Victor' },\n            { id: 4, name: 'Sasha' },\n            { id: 5, name: 'Artem' },\n            { id: 6, name: 'Pasha' }\n        ],\n        messages: [\n            { id: 1, message: 'Hi', author: 'me'},\n            { id: 2, message: 'Hello', author: 'other'},\n            { id: 3, message: 'How are you', author: 'me'},\n            { id: 3, message: 'Good', author: 'other'},\n            { id: 5, message: 'And you', author: 'other'},\n            { id: 6, message: 'Good', author: 'me'}\n        ]\n    }\n},\nrenderEntireTree() { }\n,\n}\n\n\n\n\n\nexport let updateNewPostText = (newText) => {\n    state.profilePage.newPostState = newText;\n    renderEntireTree(state);\n}\n\nexport const subscribe = (observer) => {\n    renderEntireTree = observer;\n}\n\nexport default state;\n"]},"metadata":{},"sourceType":"module"}