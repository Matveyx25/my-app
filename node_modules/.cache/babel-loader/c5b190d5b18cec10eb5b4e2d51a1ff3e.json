{"ast":null,"code":"import { usersAPI } from \"../api/api\";\nimport { updateObjectInArray } from \"../utils/objects-helpers\";\nconst FOLLOW = 'FOLLOW';\nconst UNFOLLOW = 'UNFOLLOW';\nconst SET_USERS = 'SET_USERS';\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS';\nlet initialState = {\n  users: [],\n  pageSize: 5,\n  totalUsersCount: 0,\n  currentPage: 1,\n  isFetching: false,\n  followingInProgress: []\n};\n\nconst usersReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FOLLOW:\n      return { ...state,\n        users: updateObjectInArray(state.users, action.userId, \"id\", {\n          followed: true\n        })\n      };\n\n    case UNFOLLOW:\n      return { ...state,\n        users: updateObjectInArray(state.users, action.userId, \"id\", {\n          followed: false\n        })\n      };\n\n    case SET_USERS:\n      return { ...state,\n        users: action.users\n      };\n\n    case SET_CURRENT_PAGE:\n      return { ...state,\n        currentPage: action.currentPage\n      };\n\n    case SET_TOTAL_USERS_COUNT:\n      return { ...state,\n        totalUsersCount: action.count\n      };\n\n    case TOGGLE_IS_FETCHING:\n      return { ...state,\n        isFetching: action.isFetching\n      };\n\n    case TOGGLE_IS_FOLLOWING_PROGRESS:\n      return { ...state,\n        followingInProgress: action.isFetching ? [...state.followingInProgress, action.userId] : state.followingInProgress.filter(id => id != action.userId)\n      };\n\n    default:\n      return state;\n  }\n}; // ACTION CREATOR\n\n\nexport const followSuccess = userId => ({\n  type: FOLLOW,\n  userId\n});\nexport const unfollowSuccess = userId => ({\n  type: UNFOLLOW,\n  userId\n});\nexport const setUsers = users => ({\n  type: SET_USERS,\n  users\n});\nexport const setCurrentPage = currentPage => ({\n  type: SET_CURRENT_PAGE,\n  currentPage\n});\nexport const setUsersTotalCount = totalUsersCount => ({\n  type: SET_TOTAL_USERS_COUNT,\n  count: totalUsersCount\n});\nexport const toggleIsFetching = isFetching => ({\n  type: TOGGLE_IS_FETCHING,\n  isFetching\n});\nexport const toggleFollowingProgress = (isFetching, userId) => ({\n  type: TOGGLE_IS_FOLLOWING_PROGRESS,\n  isFetching,\n  userId\n}); // THUNK\n\nconst followUnfollow = async (dispatch, userId, apiMethod, actionCreator) => {\n  dispatch(toggleFollowingProgress(true, userId));\n  let response = await apiMethod(userId);\n\n  if (response.resultCode == 0) {\n    dispatch(actionCreator(userId));\n  }\n\n  dispatch(toggleFollowingProgress(false, userId));\n};\n\nexport const requestUsers = (page, pageSize) => {\n  return async dispatch => {\n    dispatch(toggleIsFetching(true));\n    dispatch(setCurrentPage(page));\n    let data = await usersAPI.getUsers(page, pageSize);\n    dispatch(toggleIsFetching(false));\n    dispatch(setUsers(data.items));\n    dispatch(setUsersTotalCount(data.totalCount));\n  };\n};\nexport const unfollow = userId => {\n  return async dispatch => {\n    followUnfollow(dispatch, userId, usersAPI.getUnFollow.bind(usersAPI), unfollowSuccess);\n  };\n};\nexport const follow = userId => {\n  return async dispatch => {\n    followUnfollow(dispatch, userId, usersAPI.getFollow.bind(usersAPI), followSuccess);\n  };\n};\nexport default usersReducer;","map":{"version":3,"sources":["/Users/matveystepanov/Documents/SamuraysWay/first-project/my-app/src/redux/users-reduser.js"],"names":["usersAPI","updateObjectInArray","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","initialState","users","pageSize","totalUsersCount","currentPage","isFetching","followingInProgress","usersReducer","state","action","type","userId","followed","count","filter","id","followSuccess","unfollowSuccess","setUsers","setCurrentPage","setUsersTotalCount","toggleIsFetching","toggleFollowingProgress","followUnfollow","dispatch","apiMethod","actionCreator","response","resultCode","requestUsers","page","data","getUsers","items","totalCount","unfollow","getUnFollow","bind","follow","getFollow"],"mappings":"AAAA,SAASA,QAAT,QAAyB,YAAzB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AAEA,MAAMC,MAAM,GAAG,QAAf;AACA,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,SAAS,GAAG,WAAlB;AACA,MAAMC,gBAAgB,GAAG,kBAAzB;AACA,MAAMC,qBAAqB,GAAG,uBAA9B;AACA,MAAMC,kBAAkB,GAAG,oBAA3B;AACA,MAAMC,4BAA4B,GAAG,8BAArC;AAEA,IAAIC,YAAY,GAAG;AACfC,EAAAA,KAAK,EAAE,EADQ;AAEfC,EAAAA,QAAQ,EAAE,CAFK;AAGfC,EAAAA,eAAe,EAAE,CAHF;AAIfC,EAAAA,WAAW,EAAE,CAJE;AAKfC,EAAAA,UAAU,EAAE,KALG;AAMfC,EAAAA,mBAAmB,EAAE;AANN,CAAnB;;AASA,MAAMC,YAAY,GAAG,CAACC,KAAK,GAAGR,YAAT,EAAuBS,MAAvB,KAAkC;AAEnD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKjB,MAAL;AACI,aAAO,EACH,GAAGe,KADA;AAEHP,QAAAA,KAAK,EAAET,mBAAmB,CAACgB,KAAK,CAACP,KAAP,EAAcQ,MAAM,CAACE,MAArB,EAA8B,IAA9B,EAAqC;AAACC,UAAAA,QAAQ,EAAE;AAAX,SAArC;AAFvB,OAAP;;AAIA,SAAKlB,QAAL;AACA,aAAO,EACH,GAAGc,KADA;AAEHP,QAAAA,KAAK,EAAET,mBAAmB,CAACgB,KAAK,CAACP,KAAP,EAAcQ,MAAM,CAACE,MAArB,EAA8B,IAA9B,EAAqC;AAACC,UAAAA,QAAQ,EAAE;AAAX,SAArC;AAFvB,OAAP;;AAIJ,SAAKjB,SAAL;AACI,aAAO,EAAE,GAAGa,KAAL;AAAYP,QAAAA,KAAK,EAAEQ,MAAM,CAACR;AAA1B,OAAP;;AACJ,SAAKL,gBAAL;AACI,aAAO,EAAE,GAAGY,KAAL;AAAYJ,QAAAA,WAAW,EAAEK,MAAM,CAACL;AAAhC,OAAP;;AACJ,SAAKP,qBAAL;AACI,aAAO,EAAE,GAAGW,KAAL;AAAYL,QAAAA,eAAe,EAAEM,MAAM,CAACI;AAApC,OAAP;;AACJ,SAAKf,kBAAL;AACI,aAAO,EAAE,GAAGU,KAAL;AAAYH,QAAAA,UAAU,EAAEI,MAAM,CAACJ;AAA/B,OAAP;;AACJ,SAAKN,4BAAL;AACI,aAAO,EACH,GAAGS,KADA;AAEHF,QAAAA,mBAAmB,EAAEG,MAAM,CAACJ,UAAP,GACf,CAAC,GAAGG,KAAK,CAACF,mBAAV,EAA+BG,MAAM,CAACE,MAAtC,CADe,GAEfH,KAAK,CAACF,mBAAN,CAA0BQ,MAA1B,CAAiCC,EAAE,IAAIA,EAAE,IAAIN,MAAM,CAACE,MAApD;AAJH,OAAP;;AAMJ;AACI,aAAOH,KAAP;AA3BR;AA6BH,CA/BD,C,CAiCA;;;AAEA,OAAO,MAAMQ,aAAa,GAAIL,MAAD,KAAa;AAAED,EAAAA,IAAI,EAAEjB,MAAR;AAAgBkB,EAAAA;AAAhB,CAAb,CAAtB;AACP,OAAO,MAAMM,eAAe,GAAIN,MAAD,KAAa;AAAED,EAAAA,IAAI,EAAEhB,QAAR;AAAkBiB,EAAAA;AAAlB,CAAb,CAAxB;AACP,OAAO,MAAMO,QAAQ,GAAIjB,KAAD,KAAY;AAAES,EAAAA,IAAI,EAAEf,SAAR;AAAmBM,EAAAA;AAAnB,CAAZ,CAAjB;AACP,OAAO,MAAMkB,cAAc,GAAIf,WAAD,KAAkB;AAAEM,EAAAA,IAAI,EAAEd,gBAAR;AAA0BQ,EAAAA;AAA1B,CAAlB,CAAvB;AACP,OAAO,MAAMgB,kBAAkB,GAAIjB,eAAD,KAAsB;AAAEO,EAAAA,IAAI,EAAEb,qBAAR;AAA+BgB,EAAAA,KAAK,EAAEV;AAAtC,CAAtB,CAA3B;AACP,OAAO,MAAMkB,gBAAgB,GAAIhB,UAAD,KAAiB;AAAEK,EAAAA,IAAI,EAAEZ,kBAAR;AAA4BO,EAAAA;AAA5B,CAAjB,CAAzB;AACP,OAAO,MAAMiB,uBAAuB,GAAG,CAACjB,UAAD,EAAaM,MAAb,MAAyB;AAAED,EAAAA,IAAI,EAAEX,4BAAR;AAAsCM,EAAAA,UAAtC;AAAkDM,EAAAA;AAAlD,CAAzB,CAAhC,C,CAEP;;AAEA,MAAMY,cAAc,GAAG,OAAMC,QAAN,EAAiBb,MAAjB,EAA0Bc,SAA1B,EAAsCC,aAAtC,KAAwD;AAC3EF,EAAAA,QAAQ,CAACF,uBAAuB,CAAC,IAAD,EAAOX,MAAP,CAAxB,CAAR;AACI,MAAIgB,QAAQ,GAAG,MAAMF,SAAS,CAACd,MAAD,CAA9B;;AACA,MAAIgB,QAAQ,CAACC,UAAT,IAAuB,CAA3B,EAA8B;AAC1BJ,IAAAA,QAAQ,CAACE,aAAa,CAACf,MAAD,CAAd,CAAR;AACH;;AACDa,EAAAA,QAAQ,CAACF,uBAAuB,CAAC,KAAD,EAAQX,MAAR,CAAxB,CAAR;AACP,CAPD;;AASA,OAAO,MAAMkB,YAAY,GAAG,CAACC,IAAD,EAAO5B,QAAP,KAAoB;AAC5C,SAAO,MAAOsB,QAAP,IAAoB;AACvBA,IAAAA,QAAQ,CAACH,gBAAgB,CAAC,IAAD,CAAjB,CAAR;AACAG,IAAAA,QAAQ,CAACL,cAAc,CAACW,IAAD,CAAf,CAAR;AAEA,QAAIC,IAAI,GAAG,MAAMxC,QAAQ,CAACyC,QAAT,CAAkBF,IAAlB,EAAwB5B,QAAxB,CAAjB;AACAsB,IAAAA,QAAQ,CAACH,gBAAgB,CAAC,KAAD,CAAjB,CAAR;AACAG,IAAAA,QAAQ,CAACN,QAAQ,CAACa,IAAI,CAACE,KAAN,CAAT,CAAR;AACAT,IAAAA,QAAQ,CAACJ,kBAAkB,CAACW,IAAI,CAACG,UAAN,CAAnB,CAAR;AACH,GARD;AASH,CAVM;AAYP,OAAO,MAAMC,QAAQ,GAAIxB,MAAD,IAAY;AAChC,SAAO,MAAOa,QAAP,IAAoB;AACvBD,IAAAA,cAAc,CAACC,QAAD,EAAYb,MAAZ,EAAqBpB,QAAQ,CAAC6C,WAAT,CAAqBC,IAArB,CAA0B9C,QAA1B,CAArB,EAA2D0B,eAA3D,CAAd;AACH,GAFD;AAGH,CAJM;AAMP,OAAO,MAAMqB,MAAM,GAAI3B,MAAD,IAAY;AAC9B,SAAO,MAAOa,QAAP,IAAoB;AACvBD,IAAAA,cAAc,CAACC,QAAD,EAAYb,MAAZ,EAAqBpB,QAAQ,CAACgD,SAAT,CAAmBF,IAAnB,CAAwB9C,QAAxB,CAArB,EAAyDyB,aAAzD,CAAd;AACH,GAFD;AAGH,CAJM;AAMP,eAAeT,YAAf","sourcesContent":["import { usersAPI } from \"../api/api\"\nimport { updateObjectInArray } from \"../utils/objects-helpers\"\n\nconst FOLLOW = 'FOLLOW'\nconst UNFOLLOW = 'UNFOLLOW'\nconst SET_USERS = 'SET_USERS'\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE'\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT'\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING'\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS'\n\nlet initialState = {\n    users: [],\n    pageSize: 5,\n    totalUsersCount: 0,\n    currentPage: 1,\n    isFetching: false,\n    followingInProgress: []\n}\n\nconst usersReducer = (state = initialState, action) => {\n\n    switch (action.type) {\n        case FOLLOW:\n            return {\n                ...state,\n                users: updateObjectInArray(state.users, action.userId , \"id\" , {followed: true})\n         }\n            case UNFOLLOW:\n            return {\n                ...state,\n                users: updateObjectInArray(state.users, action.userId , \"id\" , {followed: false})\n                 }\n        case SET_USERS:\n            return { ...state, users: action.users }\n        case SET_CURRENT_PAGE:\n            return { ...state, currentPage: action.currentPage }\n        case SET_TOTAL_USERS_COUNT:\n            return { ...state, totalUsersCount: action.count }\n        case TOGGLE_IS_FETCHING:\n            return { ...state, isFetching: action.isFetching }\n        case TOGGLE_IS_FOLLOWING_PROGRESS:\n            return {\n                ...state,\n                followingInProgress: action.isFetching\n                    ? [...state.followingInProgress, action.userId]\n                    : state.followingInProgress.filter(id => id != action.userId)\n            }\n        default:\n            return state\n    }\n}\n\n// ACTION CREATOR\n\nexport const followSuccess = (userId) => ({ type: FOLLOW, userId })\nexport const unfollowSuccess = (userId) => ({ type: UNFOLLOW, userId })\nexport const setUsers = (users) => ({ type: SET_USERS, users })\nexport const setCurrentPage = (currentPage) => ({ type: SET_CURRENT_PAGE, currentPage })\nexport const setUsersTotalCount = (totalUsersCount) => ({ type: SET_TOTAL_USERS_COUNT, count: totalUsersCount })\nexport const toggleIsFetching = (isFetching) => ({ type: TOGGLE_IS_FETCHING, isFetching })\nexport const toggleFollowingProgress = (isFetching, userId) => ({ type: TOGGLE_IS_FOLLOWING_PROGRESS, isFetching, userId })\n\n// THUNK\n\nconst followUnfollow = async(dispatch , userId , apiMethod , actionCreator) => {\n    dispatch(toggleFollowingProgress(true, userId))\n        let response = await apiMethod(userId)\n        if (response.resultCode == 0) {\n            dispatch(actionCreator(userId))\n        }\n        dispatch(toggleFollowingProgress(false, userId))\n}\n\nexport const requestUsers = (page, pageSize) => {\n    return async (dispatch) => {\n        dispatch(toggleIsFetching(true))\n        dispatch(setCurrentPage(page))\n\n        let data = await usersAPI.getUsers(page, pageSize)\n        dispatch(toggleIsFetching(false))\n        dispatch(setUsers(data.items))\n        dispatch(setUsersTotalCount(data.totalCount))\n    }\n}\n\nexport const unfollow = (userId) => {\n    return async (dispatch) => {\n        followUnfollow(dispatch , userId , usersAPI.getUnFollow.bind(usersAPI) , unfollowSuccess)\n    }\n}\n\nexport const follow = (userId) => {\n    return async (dispatch) => {\n        followUnfollow(dispatch , userId , usersAPI.getFollow.bind(usersAPI) , followSuccess)\n    }\n}\n\nexport default usersReducer"]},"metadata":{},"sourceType":"module"}