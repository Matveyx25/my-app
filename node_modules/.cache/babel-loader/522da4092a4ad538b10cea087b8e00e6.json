{"ast":null,"code":"var _jsxFileName = \"/Users/matveystepanov/Documents/SamuraysWay/first-project/my-app/src/components/common/Paginator/Paginator.jsx\";\nimport React, { useState } from 'react';\nimport s from './Paginator.module.css';\nim;\n\nconst Paginator = ({\n  totalItemsCount,\n  pageSize,\n  portionsSize,\n  currentPage,\n  onPageChange\n}) => {\n  let pagesCount = Math.ceil(totalItemsCount / pageSize);\n  let pages = [];\n\n  for (let i = 1; i <= pagesCount; i++) {\n    pages.push(i);\n  }\n\n  let portionsCount = Math.ceil(pagesCount / portionsSize);\n  let [portionNumber, setPortionNumber] = useState(1);\n  let leftPortionPageNumber = (portionNumber - 1) * portionsSize + 1;\n  let rightPortionPageNumber = portionNumber * portionsSize;\n  return React.createElement(\"div\", {\n    className: s.currentWrap,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, portionNumber > 1 && React.createElement(\"button\", {\n    className: s.btnScroll,\n    onClick: () => setPortionNumber(portionNumber - 1),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, \"PREV\"), pages.filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber).map(p => {\n    return React.createElement(\"span\", {\n      className: currentPage === p && s.selectedPage,\n      onClick: e => {\n        onPageChange(p);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, p);\n  }), portionsCount > portionNumber && React.createElement(\"button\", {\n    className: s.btnScroll,\n    onClick: () => setPortionNumber(portionNumber + 1),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, \"NEXT\"));\n};\n\nexport default Paginator;","map":{"version":3,"sources":["/Users/matveystepanov/Documents/SamuraysWay/first-project/my-app/src/components/common/Paginator/Paginator.jsx"],"names":["React","useState","s","im","Paginator","totalItemsCount","pageSize","portionsSize","currentPage","onPageChange","pagesCount","Math","ceil","pages","i","push","portionsCount","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","currentWrap","btnScroll","filter","p","map","selectedPage","e"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,CAAP,MAAc,wBAAd;AACAC,EAAE;;AAEF,MAAMC,SAAS,GAAG,CAAC;AAACC,EAAAA,eAAD;AAAmBC,EAAAA,QAAnB;AAA8BC,EAAAA,YAA9B;AAA6CC,EAAAA,WAA7C;AAA2DC,EAAAA;AAA3D,CAAD,KAA8E;AAE5F,MAAIC,UAAU,GAAGC,IAAI,CAACC,IAAL,CAAUP,eAAe,GAAGC,QAA5B,CAAjB;AAEA,MAAIO,KAAK,GAAG,EAAZ;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIJ,UAArB,EAAiCI,CAAC,EAAlC,EAAsC;AAClCD,IAAAA,KAAK,CAACE,IAAN,CAAWD,CAAX;AACH;;AAED,MAAIE,aAAa,GAAGL,IAAI,CAACC,IAAL,CAAUF,UAAU,GAAGH,YAAvB,CAApB;AACA,MAAI,CAACU,aAAD,EAAiBC,gBAAjB,IAAqCjB,QAAQ,CAAC,CAAD,CAAjD;AACA,MAAIkB,qBAAqB,GAAG,CAACF,aAAa,GAAG,CAAjB,IAAsBV,YAAtB,GAAqC,CAAjE;AACA,MAAIa,sBAAsB,GAAGH,aAAa,GAAGV,YAA7C;AAEA,SAAQ;AAAK,IAAA,SAAS,EAAEL,CAAC,CAACmB,WAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCJ,aAAa,GAAG,CAAhB,IAAqB;AAAQ,IAAA,SAAS,EAAEf,CAAC,CAACoB,SAArB;AAAiC,IAAA,OAAO,EAAE,MAAMJ,gBAAgB,CAACD,aAAa,GAAG,CAAjB,CAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADtB,EAECJ,KAAK,CACLU,MADA,CACOC,CAAC,IAAIA,CAAC,IAAIL,qBAAL,IAA8BK,CAAC,IAAIJ,sBAD/C,EAEAK,GAFA,CAEID,CAAC,IAAI;AACN,WAAO;AAAM,MAAA,SAAS,EAAEhB,WAAW,KAAKgB,CAAhB,IAAqBtB,CAAC,CAACwB,YAAxC;AACH,MAAA,OAAO,EAAGC,CAAD,IAAO;AAAElB,QAAAA,YAAY,CAACe,CAAD,CAAZ;AAAiB,OADhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEFA,CAFE,CAAP;AAGH,GANA,CAFD,EASCR,aAAa,GAAGC,aAAhB,IAAiC;AAAQ,IAAA,SAAS,EAAEf,CAAC,CAACoB,SAArB;AAAgC,IAAA,OAAO,EAAE,MAAMJ,gBAAgB,CAACD,aAAa,GAAG,CAAjB,CAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YATlC,CAAR;AAWH,CA1BD;;AA4BA,eAAeb,SAAf","sourcesContent":["import React, { useState } from 'react'\nimport s from './Paginator.module.css'\nim\n\nconst Paginator = ({totalItemsCount , pageSize , portionsSize , currentPage , onPageChange}) => {\n\n    let pagesCount = Math.ceil(totalItemsCount / pageSize)\n\n    let pages = [];\n\n    for (let i = 1; i <= pagesCount; i++) {\n        pages.push(i);\n    }\n\n    let portionsCount = Math.ceil(pagesCount / portionsSize)\n    let [portionNumber , setPortionNumber] = useState(1)\n    let leftPortionPageNumber = (portionNumber - 1) * portionsSize + 1\n    let rightPortionPageNumber = portionNumber * portionsSize\n\n    return  <div className={s.currentWrap}>\n            {portionNumber > 1 && <button className={s.btnScroll}  onClick={() => setPortionNumber(portionNumber - 1)}>PREV</button>}\n            {pages\n            .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\n            .map(p => {\n                return <span className={currentPage === p && s.selectedPage}\n                    onClick={(e) => { onPageChange(p) }}>\n                    {p}</span>\n            })}\n            {portionsCount > portionNumber && <button className={s.btnScroll} onClick={() => setPortionNumber(portionNumber + 1)}>NEXT</button>}\n        </div>\n}\n\nexport default Paginator"]},"metadata":{},"sourceType":"module"}