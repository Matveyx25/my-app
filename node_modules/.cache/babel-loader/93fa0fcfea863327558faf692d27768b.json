{"ast":null,"code":"import { usersAPI } from \"../api/api\";\nconst FOLLOW = 'lightgram/users/FOLLOW';\nconst UNFOLLOW = 'lightgram/users/UNFOLLOW';\nconst SET_USERS = 'lightgram/users/SET_USERS';\nconst SET_CURRENT_PAGE = 'lightgram/users/SET_CURRENT_PAGE';\nconst SET_TOTAL_USERS_COUNT = 'lightgram/users/SET_TOTAL_USERS_COUNT';\nconst TOGGLE_IS_FETCHING = 'lightgram/users/TOGGLE_IS_FETCHING';\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'lightgram/users/TOGGLE_IS_FOLLOWING_PROGRESS';\nlet initialState = {\n  users: [],\n  pageSize: 5,\n  totalUsersCount: 0,\n  currentPage: 1,\n  isFetching: false,\n  followingInProgress: []\n};\n\nconst usersReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FOLLOW:\n      return { ...state,\n        users: updateObjectInArray(state.users, action.userId) // users: state.users.map(u => {\n        //     if (u.id === action.userId) {\n        //         return { ...u, followed: true }\n        //     }\n        //     return u\n        // })\n\n      };\n\n    case UNFOLLOW:\n      return { ...state,\n        users: state.users.map(u => {\n          if (u.id === action.userId) {\n            return { ...u,\n              followed: false\n            };\n          }\n\n          return u;\n        })\n      };\n\n    case SET_USERS:\n      return { ...state,\n        users: action.users\n      };\n\n    case SET_CURRENT_PAGE:\n      return { ...state,\n        currentPage: action.currentPage\n      };\n\n    case SET_TOTAL_USERS_COUNT:\n      return { ...state,\n        totalUsersCount: action.count\n      };\n\n    case TOGGLE_IS_FETCHING:\n      return { ...state,\n        isFetching: action.isFetching\n      };\n\n    case TOGGLE_IS_FOLLOWING_PROGRESS:\n      return { ...state,\n        followingInProgress: action.isFetching ? [...state.followingInProgress, action.userId] : state.followingInProgress.filter(id => id != action.userId)\n      };\n\n    default:\n      return state;\n  }\n}; // ACTION CREATOR\n\n\nexport const followSuccess = userId => ({\n  type: FOLLOW,\n  userId\n});\nexport const unfollowSuccess = userId => ({\n  type: UNFOLLOW,\n  userId\n});\nexport const setUsers = users => ({\n  type: SET_USERS,\n  users\n});\nexport const setCurrentPage = currentPage => ({\n  type: SET_CURRENT_PAGE,\n  currentPage\n});\nexport const setUsersTotalCount = totalUsersCount => ({\n  type: SET_TOTAL_USERS_COUNT,\n  count: totalUsersCount\n});\nexport const toggleIsFetching = isFetching => ({\n  type: TOGGLE_IS_FETCHING,\n  isFetching\n});\nexport const toggleFollowingProgress = (isFetching, userId) => ({\n  type: TOGGLE_IS_FOLLOWING_PROGRESS,\n  isFetching,\n  userId\n}); // THUNK\n\nconst followUnfollow = async (dispatch, userId, apiMethod, actionCreator) => {\n  dispatch(toggleFollowingProgress(true, userId));\n  let response = await apiMethod(userId);\n\n  if (response.resultCode == 0) {\n    dispatch(actionCreator(userId));\n  }\n\n  dispatch(toggleFollowingProgress(false, userId));\n};\n\nexport const requestUsers = (page, pageSize) => {\n  return async dispatch => {\n    dispatch(toggleIsFetching(true));\n    dispatch(setCurrentPage(page));\n    let data = await usersAPI.getUsers(page, pageSize);\n    dispatch(toggleIsFetching(false));\n    dispatch(setUsers(data.items));\n    dispatch(setUsersTotalCount(data.totalCount));\n  };\n};\nexport const unfollow = userId => {\n  return async dispatch => {\n    followUnfollow(dispatch, userId, usersAPI.getUnFollow.bind(usersAPI), unfollowSuccess);\n  };\n};\nexport const follow = userId => {\n  return async dispatch => {\n    followUnfollow(dispatch, userId, usersAPI.getFollow.bind(usersAPI), followSuccess);\n  };\n};\nexport default usersReducer;","map":{"version":3,"sources":["/Users/matveystepanov/Documents/SamuraysWay/first-project/my-app/src/redux/users-reduser.js"],"names":["usersAPI","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","initialState","users","pageSize","totalUsersCount","currentPage","isFetching","followingInProgress","usersReducer","state","action","type","updateObjectInArray","userId","map","u","id","followed","count","filter","followSuccess","unfollowSuccess","setUsers","setCurrentPage","setUsersTotalCount","toggleIsFetching","toggleFollowingProgress","followUnfollow","dispatch","apiMethod","actionCreator","response","resultCode","requestUsers","page","data","getUsers","items","totalCount","unfollow","getUnFollow","bind","follow","getFollow"],"mappings":"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","sourcesContent":["import { usersAPI } from \"../api/api\"\n\nconst FOLLOW = 'lightgram/users/FOLLOW'\nconst UNFOLLOW = 'lightgram/users/UNFOLLOW'\nconst SET_USERS = 'lightgram/users/SET_USERS'\nconst SET_CURRENT_PAGE = 'lightgram/users/SET_CURRENT_PAGE'\nconst SET_TOTAL_USERS_COUNT = 'lightgram/users/SET_TOTAL_USERS_COUNT'\nconst TOGGLE_IS_FETCHING = 'lightgram/users/TOGGLE_IS_FETCHING'\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'lightgram/users/TOGGLE_IS_FOLLOWING_PROGRESS'\n\nlet initialState = {\n    users: [],\n    pageSize: 5,\n    totalUsersCount: 0,\n    currentPage: 1,\n    isFetching: false,\n    followingInProgress: []\n}\n\nconst usersReducer = (state = initialState, action) => {\n\n    switch (action.type) {\n        case FOLLOW:\n            return {\n                ...state,\n                users: updateObjectInArray(state.users, action.userId , )\n                // users: state.users.map(u => {\n                //     if (u.id === action.userId) {\n                //         return { ...u, followed: true }\n                //     }\n                //     return u\n                // })\n            }\n        case UNFOLLOW:\n            return {\n                ...state,\n                users: state.users.map(u => {\n                    if (u.id === action.userId) {\n                        return { ...u, followed: false }\n                    }\n                    return u\n                })\n            }\n        case SET_USERS:\n            return { ...state, users: action.users }\n        case SET_CURRENT_PAGE:\n            return { ...state, currentPage: action.currentPage }\n        case SET_TOTAL_USERS_COUNT:\n            return { ...state, totalUsersCount: action.count }\n        case TOGGLE_IS_FETCHING:\n            return { ...state, isFetching: action.isFetching }\n        case TOGGLE_IS_FOLLOWING_PROGRESS:\n            return {\n                ...state,\n                followingInProgress: action.isFetching\n                    ? [...state.followingInProgress, action.userId]\n                    : state.followingInProgress.filter(id => id != action.userId)\n            }\n        default:\n            return state\n    }\n}\n\n// ACTION CREATOR\n\nexport const followSuccess = (userId) => ({ type: FOLLOW, userId })\nexport const unfollowSuccess = (userId) => ({ type: UNFOLLOW, userId })\nexport const setUsers = (users) => ({ type: SET_USERS, users })\nexport const setCurrentPage = (currentPage) => ({ type: SET_CURRENT_PAGE, currentPage })\nexport const setUsersTotalCount = (totalUsersCount) => ({ type: SET_TOTAL_USERS_COUNT, count: totalUsersCount })\nexport const toggleIsFetching = (isFetching) => ({ type: TOGGLE_IS_FETCHING, isFetching })\nexport const toggleFollowingProgress = (isFetching, userId) => ({ type: TOGGLE_IS_FOLLOWING_PROGRESS, isFetching, userId })\n\n// THUNK\nconst followUnfollow = async(dispatch , userId , apiMethod , actionCreator) => {\n    dispatch(toggleFollowingProgress(true, userId))\n        let response = await apiMethod(userId)\n        if (response.resultCode == 0) {\n            dispatch(actionCreator(userId))\n        }\n        dispatch(toggleFollowingProgress(false, userId))\n}\n\nexport const requestUsers = (page, pageSize) => {\n    return async (dispatch) => {\n        dispatch(toggleIsFetching(true))\n        dispatch(setCurrentPage(page))\n\n        let data = await usersAPI.getUsers(page, pageSize)\n        dispatch(toggleIsFetching(false))\n        dispatch(setUsers(data.items))\n        dispatch(setUsersTotalCount(data.totalCount))\n    }\n}\n\nexport const unfollow = (userId) => {\n    return async (dispatch) => {\n        followUnfollow(dispatch , userId , usersAPI.getUnFollow.bind(usersAPI) , unfollowSuccess)\n    }\n}\n\nexport const follow = (userId) => {\n    return async (dispatch) => {\n        followUnfollow(dispatch , userId , usersAPI.getFollow.bind(usersAPI) , followSuccess)\n    }\n}\n\nexport default usersReducer"]},"metadata":{},"sourceType":"module"}