{"ast":null,"code":"import { authAPI } from \"../api/api\";\nimport { stopSubmit } from \"redux-form\";\nconst SET_USER_DATA = 'SET_USER_DATA';\nlet initialState = {\n  usersId: null,\n  email: null,\n  login: null,\n  isAuth: false\n};\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USER_DATA:\n      return { ...state,\n        ...action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const setAuthUserData = (id, email, login, isAuth) => ({\n  type: SET_USER_DATA,\n  payload: {\n    id,\n    email,\n    login,\n    isAuth\n  }\n});\nexport const getAuthUserData = () => dispatch => {\n  authAPI.me().then(response => {\n    if (response.data.resultCode === 0) {\n      let {\n        id,\n        email,\n        login\n      } = response.data.data;\n      dispatch(setAuthUserData(id, email, login, true));\n    }\n  });\n};\nexport const login = (email, password, rememberMe) => dispatch => {\n  authAPI.login(email, password, rememberMe).then(response => {\n    if (response.data.resultCode === 0) {\n      dispatch(getAuthUserData());\n    }\n  });\n};\nexport const logout = () => dispatch => {\n  authAPI.logout().then(response => {\n    if (response.data.resultCode === 0) {\n      dispatch(setAuthUserData(null, null, null, false));\n    } else {}\n  });\n};\nexport default authReducer;","map":{"version":3,"sources":["/Users/matveystepanov/Documents/SamuraysWay/first-project/my-app/src/redux/auth-reducer.js"],"names":["authAPI","stopSubmit","SET_USER_DATA","initialState","usersId","email","login","isAuth","authReducer","state","action","type","payload","setAuthUserData","id","getAuthUserData","dispatch","me","then","response","data","resultCode","password","rememberMe","logout"],"mappings":"AAAA,SAASA,OAAT,QAAwB,YAAxB;AACA,SAASC,UAAT,QAA2B,YAA3B;AAEA,MAAMC,aAAa,GAAG,eAAtB;AAEA,IAAIC,YAAY,GAAG;AACfC,EAAAA,OAAO,EAAE,IADM;AAEfC,EAAAA,KAAK,EAAE,IAFQ;AAGfC,EAAAA,KAAK,EAAE,IAHQ;AAIfC,EAAAA,MAAM,EAAE;AAJO,CAAnB;;AAOA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AAClD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,aAAL;AACI,aAAO,EACH,GAAGO,KADA;AAEH,WAAGC,MAAM,CAACE;AAFP,OAAP;;AAIJ;AACI,aAAOH,KAAP;AAPR;AASH,CAVD;;AAaA,OAAO,MAAMI,eAAe,GAAG,CAACC,EAAD,EAAMT,KAAN,EAAcC,KAAd,EAAsBC,MAAtB,MAC9B;AAAEI,EAAAA,IAAI,EAAET,aAAR;AAAuBU,EAAAA,OAAO,EAAE;AAACE,IAAAA,EAAD;AAAKT,IAAAA,KAAL;AAAYC,IAAAA,KAAZ;AAAoBC,IAAAA;AAApB;AAAhC,CAD8B,CAAxB;AAGP,OAAO,MAAMQ,eAAe,GAAG,MAAOC,QAAD,IAAc;AAC/ChB,EAAAA,OAAO,CAACiB,EAAR,GAAaC,IAAb,CAAkBC,QAAQ,IAAI;AAC1B,QAAGA,QAAQ,CAACC,IAAT,CAAcC,UAAd,KAA6B,CAAhC,EAAkC;AAC9B,UAAI;AAACP,QAAAA,EAAD;AAAMT,QAAAA,KAAN;AAAcC,QAAAA;AAAd,UAAuBa,QAAQ,CAACC,IAAT,CAAcA,IAAzC;AACAJ,MAAAA,QAAQ,CAACH,eAAe,CAACC,EAAD,EAAMT,KAAN,EAAcC,KAAd,EAAqB,IAArB,CAAhB,CAAR;AACH;AACJ,GALD;AAMH,CAPM;AASP,OAAO,MAAMA,KAAK,GAAG,CAACD,KAAD,EAASiB,QAAT,EAAoBC,UAApB,KAAoCP,QAAD,IAAc;AAClEhB,EAAAA,OAAO,CAACM,KAAR,CAAcD,KAAd,EAAqBiB,QAArB,EAA+BC,UAA/B,EAA2CL,IAA3C,CAAgDC,QAAQ,IAAI;AACxD,QAAGA,QAAQ,CAACC,IAAT,CAAcC,UAAd,KAA6B,CAAhC,EAAkC;AAC9BL,MAAAA,QAAQ,CAACD,eAAe,EAAhB,CAAR;AACH;AACJ,GAJD;AAKH,CANM;AAQP,OAAO,MAAMS,MAAM,GAAG,MAAOR,QAAD,IAAc;AAEtChB,EAAAA,OAAO,CAACwB,MAAR,GAAiBN,IAAjB,CAAsBC,QAAQ,IAAI;AAC9B,QAAGA,QAAQ,CAACC,IAAT,CAAcC,UAAd,KAA6B,CAAhC,EAAkC;AAC9BL,MAAAA,QAAQ,CAACH,eAAe,CAAC,IAAD,EAAQ,IAAR,EAAe,IAAf,EAAqB,KAArB,CAAhB,CAAR;AACH,KAFD,MAEK,CACJ;AACJ,GALD;AAMH,CARM;AAUP,eAAeL,WAAf","sourcesContent":["import { authAPI } from \"../api/api\";\nimport { stopSubmit } from \"redux-form\";\n\nconst SET_USER_DATA = 'SET_USER_DATA'\n\nlet initialState = {\n    usersId: null,\n    email: null,\n    login: null,\n    isAuth: false\n}\n\nconst authReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_USER_DATA:\n            return {\n                ...state,\n                ...action.payload\n                }   \n        default:\n            return state;\n    }\n}\n\n\nexport const setAuthUserData = (id , email , login , isAuth) => \n({ type: SET_USER_DATA, payload: {id, email, login , isAuth}})\n\nexport const getAuthUserData = () => (dispatch) => {\n    authAPI.me().then(response => {\n        if(response.data.resultCode === 0){\n            let {id , email , login} = response.data.data\n            dispatch(setAuthUserData(id , email , login, true))\n        }\n    })\n}\n\nexport const login = (email , password , rememberMe) => (dispatch) => {\n    authAPI.login(email, password, rememberMe).then(response => {\n        if(response.data.resultCode === 0){\n            dispatch(getAuthUserData())\n        }\n    })\n}\n\nexport const logout = () => (dispatch) => {\n    \n    authAPI.logout().then(response => {\n        if(response.data.resultCode === 0){\n            dispatch(setAuthUserData(null , null , null, false))\n        }else{\n        }\n    })\n}\n\nexport default authReducer;"]},"metadata":{},"sourceType":"module"}