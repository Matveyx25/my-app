{"version":3,"sources":["components/Dialogs/Dialogs.module.css","hoc/withAuthRedirect.js","components/Dialogs/DilogItem/DialogItems.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","DialogItem","className","s","dialog","activeClassName","active","id","logo","name","Message","message","maxLength","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","Dialogs","dialogsPage","dialogsElements","dialogs","map","d","messageElements","messages","m","author","dialogs_items","values","addMessage","newMessageBody","compose","newMessageState","dispatch","addMessageActionCreator"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,cAAgB,+BAA+B,OAAS,wBAAwB,OAAS,wBAAwB,QAAU,yBAAyB,KAAO,sBAAsB,WAAa,8B,+ICG/OC,EAA6B,SAACC,GAAD,MAAY,CACrCC,OAAQD,EAAME,KAAKD,SAGdE,EAAmB,SAACC,GAAe,IAEtCC,EAFqC,iLAInC,OAAKC,KAAKC,MAAMN,OACT,kBAACG,EAAcE,KAAKC,OADI,kBAAC,IAAD,CAAUC,GAAG,eAJT,GAEXC,IAAML,WAUtC,OAFiCM,YAAQX,EAARW,CAAoCL,K,sFCF1DM,EAXI,SAACJ,GAChB,OACI,yBAAKK,UAAWC,IAAEC,QACd,kBAAC,IAAD,CAASC,gBAAiBF,IAAEG,OAAQR,GAAI,YAAcD,EAAMU,IACxD,yBAAKL,UAAWC,IAAEK,OACjBX,EAAMY,QCARC,EAPC,SAACb,GAEb,OACI,yBAAKK,UAAWC,IAAEQ,SAAUd,EAAMc,QAAlC,M,iDC4BFC,EAAYC,YAAiB,KAa7BC,EAAsBC,YAAU,CAACC,KAAM,wBAAjBD,EAXL,SAAClB,GACpB,OAAO,0BAAMoB,SAAUpB,EAAMqB,cACrB,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IACjBZ,KAAK,iBACLa,YAAY,cACZC,SAAU,CAACC,IAAWZ,KACvB,4CAOGa,EAvCC,SAAC5B,GAEb,IAAIP,EAAQO,EAAM6B,YAEdC,EAAkBrC,EAAMsC,QAAQC,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAYrB,KAAMqB,EAAErB,KAAMF,GAAIuB,EAAEvB,QACzEwB,EAAkBzC,EAAM0C,SAASH,KAAI,SAAAI,GAAC,OAAI,kBAAC,EAAD,CAAStB,QAASsB,EAAEtB,QAASuB,OAAQD,EAAEC,YAKrF,OAAIrC,EAAMN,OAEN,yBAAKW,UAAWC,IAAEyB,SACd,yBAAK1B,UAAWC,IAAEgC,eACbR,GAEL,yBAAKzB,UAAWC,IAAE6B,UACbD,EACD,kBAACjB,EAAD,CAAqBG,SAXb,SAACmB,GACjBvC,EAAMwC,WAAWD,EAAOE,qBAEH,kBAAC,IAAD,CAAUxC,GAAI,Y,wBCE5ByC,sBACX9C,IACAO,aAlBkB,SAACV,GACnB,MAAO,CACHoC,YAAapC,EAAMoC,YACnBc,gBAAiBlD,EAAMoC,YAAYc,gBACnCjD,OAAQD,EAAME,KAAKD,WAIF,SAACkD,GACtB,MAAO,CACHJ,WAAY,SAACC,GACTG,EAASC,YAAwBJ,SAK9BC,CAGVd","file":"static/js/4.785b264f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialogs_items\":\"Dialogs_dialogs_items__16PrC\",\"dialog\":\"Dialogs_dialog__lk_cw\",\"active\":\"Dialogs_active__2sQhs\",\"message\":\"Dialogs_message__1xIDh\",\"logo\":\"Dialogs_logo__23Wnp\",\"message_me\":\"Dialogs_message_me__3ZYTx\"};","import React from 'react'\nimport { Redirect } from 'react-router-dom'\nimport { connect } from 'react-redux'\n\nlet mapStateToPropsForRedirect = (state) => ({\n        isAuth: state.auth.isAuth\n    })\n    \nexport const withAuthRedirect = (Component) => {\n    \n    class RedirectComponent extends React.Component {\n        render() {\n            if (!this.props.isAuth) return <Redirect to=\"/login\" />\n            return <Component {...this.props} />\n        }\n    }\n    \n\n    let ConnectedRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\n\n    return ConnectedRedirectComponent\n}\n\n","import React from 'react';\nimport s from \"./../Dialogs.module.css\";\nimport { NavLink } from 'react-router-dom';\n\n\nconst DialogItem = (props) => {\n    return (\n        <div className={s.dialog}>\n            <NavLink activeClassName={s.active} to={\"/dialogs/\" + props.id}>\n                <div className={s.logo}></div>\n                {props.name}\n            </NavLink>\n        </div>\n    );\n}\n\nexport default DialogItem;","import React from 'react';\nimport s from \"./../Dialogs.module.css\";\n\nconst Message = (props) => {\n\n    return (\n        <div className={s.message}>{props.message} </div>\n    );\n}\n\nexport default Message;","import React from 'react'\nimport s from \"./Dialogs.module.css\"\nimport DialogItem from './DilogItem/DialogItems'\nimport Message from './Message/Message'\nimport { addMessageActionCreator, updateNewMessageTextActionCreater } from '../../redux/dialogs-reduser';\nimport {Field , reduxForm} from 'redux-form'\nimport { Redirect } from 'react-router-dom';\nimport {required , maxLengthCreator} from '../../utils/validators/validators'\nimport { Textarea } from '../common/FormsControl/FormsControls';\n\nconst Dialogs = (props) => {\n\n    let state = props.dialogsPage;\n\n    let dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} id={d.id} />);\n    let messageElements = state.messages.map(m => <Message message={m.message} author={m.author} />);\n\n    let addNewMessage = (values) => {\n        props.addMessage(values.newMessageBody)\n    }   \n    if(!props.isAuth) return <Redirect to={\"/login\"}/>\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogs_items}>\n                {dialogsElements}\n            </div>\n            <div className={s.messages}>\n                {messageElements}\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\n            </div>\n        </div>\n    )\n}\n\nconst maxLength = maxLengthCreator(100)\n\nconst AddMessageForm = (props) => {\n    return <form onSubmit={props.handleSubmit}>\n            <Field component={Textarea}\n             name=\"newMessageBody\" \n             placeholder=\"New message\"\n             validate={[required , maxLength]}/>\n            <button>send</button>\n            </form>\n}\n\n\nconst AddMessageFormRedux = reduxForm({form: \"dialogAddMessageForm\"})(AddMessageForm)\n\nexport default Dialogs","import Dialogs from './Dialogs';\nimport { addMessageActionCreator, updateNewMessageTextActionCreater } from '../../redux/dialogs-reduser';\nimport { connect } from 'react-redux';\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\nimport { compose } from 'redux';\n\nlet mapStateToProps = (state) => {\n    return {\n        dialogsPage: state.dialogsPage,\n        newMessageState: state.dialogsPage.newMessageState,\n        isAuth: state.auth.isAuth\n    }\n}\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        addMessage: (newMessageBody) => {\n            dispatch(addMessageActionCreator(newMessageBody));\n        }\n    }\n}\n\nexport default compose(\n    withAuthRedirect,\n    connect(mapStateToProps, mapDispatchToProps))\n    (Dialogs)"],"sourceRoot":""}